[{"/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/App.js":"1","/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/index.js":"2","/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/stores/user.js":"3","/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/stores/root.js":"4","/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/Teacher/index.js":"5","/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/Student/index.js":"6","/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/Teacher/Quiz/index.js":"7","/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/Teacher/Login/index.js":"8","/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/Teacher/Quiz/QuestionModal.js":"9"},{"size":3249,"mtime":1607869393497,"results":"10","hashOfConfig":"11"},{"size":559,"mtime":1606666080302,"results":"12","hashOfConfig":"11"},{"size":244,"mtime":1606664341444,"results":"13","hashOfConfig":"11"},{"size":132,"mtime":1606664702421,"results":"14","hashOfConfig":"11"},{"size":2715,"mtime":1607868555088,"results":"15","hashOfConfig":"11"},{"size":7115,"mtime":1607867206049,"results":"16","hashOfConfig":"11"},{"size":9132,"mtime":1607868983475,"results":"17","hashOfConfig":"11"},{"size":6955,"mtime":1607869426986,"results":"18","hashOfConfig":"11"},{"size":1659,"mtime":1606844200337,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"18wcnwr",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},"/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/App.js",["42"],"/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/index.js",[],["43","44"],"/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/stores/user.js",[],"/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/stores/root.js",[],["45","46"],"/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/Teacher/index.js",["47"],"/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/Student/index.js",["48","49","50","51","52"],"/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/Teacher/Quiz/index.js",["53","54","55","56","57","58","59","60","61","62","63"],"import React from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport {\n  Button,\n  Space,\n  Table,\n  Modal,\n  Form,\n  Input,\n  Progress,\n  Typography,\n  Spin,\n  Upload,\n} from \"antd\";\nimport {\n  ConsoleSqlOutlined,\n  PlusCircleOutlined,\n  SketchSquareFilled,\n  UploadOutlined,\n} from \"@ant-design/icons\";\nimport QuestionModal from \"./QuestionModal\";\n\n/**\n * 1) Static page (init)\n * 2) Generate code (generateCode)\n * 3) N question (question)\n * 4) Your result (result)\n */\n\nconst sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nconst { Title, Text } = Typography;\n\nfunction makeid(length) {\n  var result = \"\";\n  var characters = \"0123456789\";\n  var charactersLength = characters.length;\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\nconst quiz = [\n  {\n    id: 1,\n    name: \"Why do you never see elephants hiding in trees?\",\n    answer: \"Because they're very good at it.\",\n    time: \"10\",\n    cost: 1,\n  },\n  {\n    id: 2,\n    name: \"Why do flamingos always lift one leg while standing?\",\n    answer: \"Because if they lifted both legs they'd fall over.\",\n    time: \"10\",\n    cost: 1,\n  },\n];\n\nconst Quiz = () => {\n  const location = useLocation();\n  const history = useHistory();\n  const [currentStage, onChangeStage] = React.useState(\n    !!location.search ? \"generateCode\" : \"init\"\n  );\n  const [currentQuestion, onQuestion] = React.useState(0);\n  const [waitUntil, onWaitQuestion] = React.useState(null);\n\n  const [quizId] = React.useState(\n    !!location.pathname.split(\"/\")[2]\n      ? Number(location.pathname.split(\"/\")[2])\n      : -1\n  );\n\n  const [modalVisible, onModalVisible] = React.useState(false);\n  const [question, onChangeQuestion] = React.useState({});\n\n  const [quizData, setQuizData] = React.useState([]);\n\n  const [studentResults, setStudentResults] = React.useState([]);\n\n  React.useEffect(() => {\n    const getQuizData = async () => {\n      const res = await fetch(\n        process.env.REACT_APP_BACKEND + `/quiz/${quizId}`,\n        {\n          method: \"GET\",\n          headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\n        }\n      );\n      const body = await res.json();\n\n      setQuizData(\n        body.questions.map((i) => ({\n          name: i.question,\n          answer: Object.keys(i.answers)[0],\n          time: 10,\n          cost: Object.values(i.answers)[0],\n        }))\n      );\n    };\n\n    if (quizId !== -1) {\n      getQuizData();\n    }\n  }, []);\n\n  React.useEffect(() => {\n    console.log(`Current stage: ${currentStage}`);\n\n    const stateManager = async () => {\n      if (currentStage === \"result\") {\n        const res = await fetch(\n          process.env.REACT_APP_BACKEND + `/quiz/${quizId}/results`,\n          { method: \"GET\" }\n        );\n        const body = await res.json();\n        setStudentResults(body);\n      }\n    };\n\n    stateManager();\n  }, [currentStage]);\n\n  React.useEffect(() => {\n    const update = async () => {\n      if (currentStage === \"question\" || currentStage === \"questionWait\") {\n        const timeDiv = 1000;\n\n        await sleep(timeDiv);\n\n        if (\n          waitUntil + timeDiv >=\n          Number(quizData[currentQuestion].time) * 1000\n        ) {\n          if (currentQuestion + 1 >= quizData.length) {\n            onChangeStage(\"result\");\n          } else {\n            onQuestion(currentQuestion + 1);\n            onWaitQuestion(0);\n          }\n        } else {\n          onWaitQuestion(waitUntil + timeDiv);\n        }\n      }\n    };\n\n    update();\n  }, [waitUntil]);\n\n  const columns = [\n    {\n      title: \"Question\",\n      dataIndex: \"name\",\n      width: \"90%\",\n    },\n    {\n      title: \"Action\",\n      key: \"action\",\n      render: (text, record, index) => {\n        return (\n          <Space size=\"middle\">\n            <Button\n              onClick={() => {\n                onChangeQuestion(record);\n                onModalVisible(true);\n              }}\n            >\n              Update\n            </Button>\n            <Button\n              danger\n              onClick={() => {\n                setQuizData([\n                  ...quizData.slice(0, index),\n                  ...quizData.slice(index + 1, quizData.length),\n                ]);\n              }}\n            >\n              Delete\n            </Button>\n          </Space>\n        );\n      },\n    },\n  ];\n\n  const questionColumns = [\n    { title: \"Student\", dataIndex: \"login\", key: \"login\" },\n    { title: \"Answer\", dataIndex: \"answer\", key: \"answer\" },\n  ];\n\n  const allResultsColumns = [\n    { title: \"Student\", dataIndex: \"username\", key: \"username\" },\n    { title: \"Score\", dataIndex: \"score\", key: \"score\" },\n    { title: \"Answers\", dataIndex: \"answers\", key: \"answers\" },\n  ];\n\n  const renderStage = (stage) => {\n    switch (stage) {\n      case \"init\":\n        return (\n          <>\n            <Space align=\"start\">\n              <Button\n                icon={<PlusCircleOutlined />}\n                onClick={() => {\n                  onModalVisible(true);\n                  onChangeQuestion({});\n                }}\n                style={{ marginBottom: \"1rem\" }}\n              >\n                Add new question\n              </Button>\n              <Upload\n                action={process.env.REACT_APP_BACKEND + `/csv/${quizId}`}\n                headers={{\n                  Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n                }}\n                method=\"PUT\"\n              >\n                <Button icon={<UploadOutlined />}>Upload CSV</Button>\n              </Upload>\n\n              <Button\n                onClick={() => {\n                  onChangeStage(\"result\");\n                  // onWaitQuestion(0);\n                }}\n              >\n                Quiz results\n              </Button>\n              <Button\n                onClick={async () => {\n                  const res = await fetch(\n                    process.env.REACT_APP_BACKEND + \"/quiz\",\n                    {\n                      method: \"PUT\",\n                      headers: {\n                        Authorization: `Bearer ${localStorage.getItem(\n                          \"token\"\n                        )}`,\n                      },\n                      body: JSON.stringify({\n                        quiz_id: makeid(6),\n                        questions: [\n                          ...quizData.map((i) => {\n                            return {\n                              question: i.name,\n                              answers: { [i.answer]: i.cost },\n                            };\n                          }),\n                        ],\n                      }),\n                    }\n                  );\n                  const body = await res.json();\n                  if (res.status === 201) {\n                    history.push(\"/teacher\");\n                  }\n                }}\n              >\n                Save\n              </Button>\n            </Space>\n            <Table\n              columns={columns}\n              dataSource={quizData}\n              pagination={false}\n            ></Table>\n\n            <QuestionModal\n              visible={modalVisible}\n              onCreate={(e) => {\n                onModalVisible(false);\n                setQuizData([...quizData, e]);\n              }}\n              onCancel={() => {\n                onModalVisible(false);\n              }}\n              initialValues={question}\n            />\n          </>\n        );\n      case \"generateCode\":\n        return (\n          <div className=\"enterCode\">\n            <Title>Quiz</Title>\n            <Text>\n              Your code is: <Title level={6}>{quizId}</Title>\n            </Text>\n            {/* <Button\n              onClick={() => {\n                onChangeStage(\"question\");\n                onWaitQuestion(0);\n              }}\n            >\n              Start quiz\n            </Button> */}\n          </div>\n        );\n      case \"question\":\n        return (\n          <div className=\"question\">\n            <Title>{quizData[currentQuestion].name}</Title>\n            <Title level={3}>Already answered</Title>\n            <Table\n              columns={questionColumns}\n              dataSource={[{ login: \"Student 1\", answer: \"answer\", key: 1 }]}\n              pagination={false}\n              style={{ width: \"100%\" }}\n            />\n            <Progress\n              percent={\n                (waitUntil / (1000 * Number(quizData[currentQuestion].time))) *\n                100\n              }\n              showInfo={false}\n              status=\"active\"\n            />\n          </div>\n        );\n      case \"result\":\n        return (\n          <div className=\"result\">\n            <Title>Students' results</Title>\n            <Table dataSource={studentResults} columns={allResultsColumns} />\n          </div>\n        );\n      default:\n        return (\n          <div className=\"wrong\">\n            <Title>Something wrong. Please, reload page</Title>\n          </div>\n        );\n    }\n  };\n\n  return <div className=\"quiz\">{renderStage(currentStage)}</div>;\n};\n\nexport default Quiz;\n","/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/Teacher/Login/index.js",["64"],"/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/Teacher/Quiz/QuestionModal.js",["65","66"],"import React from \"react\";\nimport { Button, Modal, Form, Input, Radio } from \"antd\";\n\nconst QuestionModal = ({ visible, onCreate, onCancel, initialValues }) => {\n  const [form] = Form.useForm();\n  return (\n    <Modal\n      visible={visible}\n      title=\"Create a new collection\"\n      okText=\"Create\"\n      cancelText=\"Cancel\"\n      onCancel={onCancel}\n      onOk={() => {\n        form\n          .validateFields()\n          .then((values) => {\n            form.resetFields();\n            onCreate(values);\n          })\n          .catch((info) => {\n            console.log(\"Validate Failed:\", info);\n          });\n      }}\n    >\n      <Form\n        form={form}\n        layout=\"vertical\"\n        name=\"form_in_modal\"\n        initialValues={initialValues}\n      >\n        <Form.Item\n          name=\"name\"\n          label=\"Question\"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          name=\"answer\"\n          label=\"Answer\"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          name=\"time\"\n          label=\"Time\"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          name=\"cost\"\n          label=\"Cost\"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default QuestionModal;\n",{"ruleId":"67","severity":1,"message":"68","line":3,"column":10,"nodeType":"69","messageId":"70","endLine":3,"endColumn":23},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"71","replacedBy":"75"},{"ruleId":"73","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":26,"column":6,"nodeType":"79","endLine":26,"endColumn":8,"suggestions":"80"},{"ruleId":"67","severity":1,"message":"81","line":1,"column":17,"nodeType":"69","messageId":"70","endLine":1,"endColumn":21},{"ruleId":"67","severity":1,"message":"82","line":16,"column":7,"nodeType":"69","messageId":"70","endLine":16,"endColumn":11},{"ruleId":"77","severity":1,"message":"83","line":86,"column":6,"nodeType":"79","endLine":86,"endColumn":20,"suggestions":"84"},{"ruleId":"77","severity":1,"message":"85","line":121,"column":6,"nodeType":"79","endLine":121,"endColumn":17,"suggestions":"86"},{"ruleId":"67","severity":1,"message":"87","line":157,"column":11,"nodeType":"69","messageId":"70","endLine":157,"endColumn":14},{"ruleId":"67","severity":1,"message":"88","line":7,"column":3,"nodeType":"69","messageId":"70","endLine":7,"endColumn":8},{"ruleId":"67","severity":1,"message":"89","line":8,"column":3,"nodeType":"69","messageId":"70","endLine":8,"endColumn":7},{"ruleId":"67","severity":1,"message":"90","line":9,"column":3,"nodeType":"69","messageId":"70","endLine":9,"endColumn":8},{"ruleId":"67","severity":1,"message":"91","line":12,"column":3,"nodeType":"69","messageId":"70","endLine":12,"endColumn":7},{"ruleId":"67","severity":1,"message":"92","line":16,"column":3,"nodeType":"69","messageId":"70","endLine":16,"endColumn":21},{"ruleId":"67","severity":1,"message":"93","line":18,"column":3,"nodeType":"69","messageId":"70","endLine":18,"endColumn":21},{"ruleId":"67","severity":1,"message":"82","line":44,"column":7,"nodeType":"69","messageId":"70","endLine":44,"endColumn":11},{"ruleId":"77","severity":1,"message":"94","line":107,"column":6,"nodeType":"79","endLine":107,"endColumn":8,"suggestions":"95"},{"ruleId":"77","severity":1,"message":"94","line":124,"column":6,"nodeType":"79","endLine":124,"endColumn":20,"suggestions":"96"},{"ruleId":"77","severity":1,"message":"97","line":150,"column":6,"nodeType":"79","endLine":150,"endColumn":17,"suggestions":"98"},{"ruleId":"67","severity":1,"message":"99","line":258,"column":25,"nodeType":"69","messageId":"70","endLine":258,"endColumn":29},{"ruleId":"100","severity":1,"message":"101","line":157,"column":15,"nodeType":"102","endLine":164,"endColumn":16},{"ruleId":"67","severity":1,"message":"103","line":2,"column":10,"nodeType":"69","messageId":"70","endLine":2,"endColumn":16},{"ruleId":"67","severity":1,"message":"104","line":2,"column":38,"nodeType":"69","messageId":"70","endLine":2,"endColumn":43},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","no-native-reassign",["105"],"no-negated-in-lhs",["106"],["105"],["106"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["107"],"'memo' is defined but never used.","'quiz' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'quizData' and 'userAnswers'. Either include them or remove the dependency array. You can also do a functional update 'onUserAnswer(u => ...)' if you only need 'userAnswers' in the 'onUserAnswer' call.",["108"],"React Hook React.useEffect has missing dependencies: 'currentQuestion', 'currentStage', 'quizData', and 'userAnswers'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'onUserAnswer' needs the current value of 'quizData'.",["109"],"'res' is assigned a value but never used.","'Modal' is defined but never used.","'Form' is defined but never used.","'Input' is defined but never used.","'Spin' is defined but never used.","'ConsoleSqlOutlined' is defined but never used.","'SketchSquareFilled' is defined but never used.","React Hook React.useEffect has a missing dependency: 'quizId'. Either include it or remove the dependency array.",["110"],["111"],"React Hook React.useEffect has missing dependencies: 'currentQuestion', 'currentStage', and 'quizData'. Either include them or remove the dependency array. You can also do a functional update 'onQuestion(c => ...)' if you only need 'currentQuestion' in the 'onQuestion' call.",["112"],"'body' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Button' is defined but never used.","'Radio' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},"Update the dependencies array to be: [history]",{"range":"125","text":"126"},"Update the dependencies array to be: [currentStage, quizData, userAnswers]",{"range":"127","text":"128"},"Update the dependencies array to be: [currentQuestion, currentStage, quizData, userAnswers, waitUntil]",{"range":"129","text":"130"},"Update the dependencies array to be: [quizId]",{"range":"131","text":"132"},"Update the dependencies array to be: [currentStage, quizId]",{"range":"133","text":"134"},"Update the dependencies array to be: [currentQuestion, currentStage, quizData, waitUntil]",{"range":"135","text":"136"},[797,799],"[history]",[2050,2064],"[currentStage, quizData, userAnswers]",[3020,3031],"[currentQuestion, currentStage, quizData, userAnswers, waitUntil]",[2538,2540],"[quizId]",[2954,2968],"[currentStage, quizId]",[3592,3603],"[currentQuestion, currentStage, quizData, waitUntil]"]