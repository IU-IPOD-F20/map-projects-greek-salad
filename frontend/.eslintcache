[{"/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/App.js":"1","/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/index.js":"2","/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/stores/user.js":"3","/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/stores/root.js":"4","/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/Teacher/index.js":"5","/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/Student/index.js":"6","/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/Teacher/Quiz/index.js":"7","/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/Teacher/Login/index.js":"8","/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/Teacher/Quiz/QuestionModal.js":"9"},{"size":2974,"mtime":1606843141698,"results":"10","hashOfConfig":"11"},{"size":559,"mtime":1606666080302,"results":"12","hashOfConfig":"11"},{"size":244,"mtime":1606664341444,"results":"13","hashOfConfig":"11"},{"size":132,"mtime":1606664702421,"results":"14","hashOfConfig":"11"},{"size":1921,"mtime":1607282196462,"results":"15","hashOfConfig":"11"},{"size":6322,"mtime":1607264298081,"results":"16","hashOfConfig":"11"},{"size":6920,"mtime":1606846657826,"results":"17","hashOfConfig":"11"},{"size":6934,"mtime":1607325818162,"results":"18","hashOfConfig":"11"},{"size":1659,"mtime":1606844200337,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},"18wcnwr",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},"/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/App.js",["44"],"import React from \"react\";\nimport { Layout, Menu, Typography, Button } from \"antd\";\nimport { BrowserRouter, Switch, Route, useHistory } from \"react-router-dom\";\n\nimport Teacher from \"./Teacher\";\nimport Student from \"./Student\";\nimport Login from \"./Teacher/Login\";\nimport Quiz from \"./Teacher/Quiz\";\nimport \"./App.css\";\n\nconst { Header, Content, Footer } = Layout;\nconst { Title } = Typography;\n\nconst App = () => {\n  const history = useHistory();\n\n  const handleUserChange = (user) => {\n    history.push(`/${user}`);\n  };\n\n  return (\n    <div className=\"App\">\n      <Layout>\n        <Header style={{ position: \"fixed\", zIndex: 1, width: \"100%\" }}>\n          <div className=\"logo\" />\n          <Menu\n            theme=\"dark\"\n            mode=\"horizontal\"\n            onClick={(e) => {\n              handleUserChange(e.key);\n            }}\n          >\n            <Menu.Item key=\"teacher\">Teacher</Menu.Item>\n            <Menu.Item key=\"student\">Student</Menu.Item>\n          </Menu>\n        </Header>\n        <Content\n          className=\"site-layout\"\n          style={{\n            padding: \"0 50px\",\n            marginTop: 64,\n            minHeight: \"calc(100vh - 130px)\",\n          }}\n        >\n          <div\n            className=\"site-layout-background\"\n            style={{\n              padding: 24,\n              marginTop: 32,\n              height: \"100%\",\n              minHeight: \"calc(100vh - 130px)\",\n            }}\n          >\n            <Switch>\n              <Route path=\"/teacher\">\n                <Teacher />\n              </Route>\n              <Route path=\"/student\">\n                <Student />\n              </Route>\n              <Route path=\"/quiz/:id\">\n                <Quiz />\n              </Route>\n              <Route path=\"/quiz/\">\n                <Quiz />\n              </Route>\n              <Route path=\"/login\">\n                <Login />\n              </Route>\n              <Route path=\"/\" exact>\n                <div className=\"userType\">\n                  <Title style={{ textAlign: \"center\" }}>Are you...?</Title>\n                  <div className=\"userTypeWrapper\">\n                    <Button\n                      type=\"text\"\n                      onClick={() => {\n                        history.push(\"/login\");\n                      }}\n                    >\n                      Teacher\n                    </Button>\n                    <Button\n                      type=\"text\"\n                      onClick={() => {\n                        history.push(\"/student\");\n                      }}\n                    >\n                      Student\n                    </Button>\n                  </div>\n                </div>\n              </Route>\n            </Switch>\n          </div>\n        </Content>\n        <Footer style={{ textAlign: \"center\" }}>\n          Greek salad Â©2020 Created by Salavat Dinmukhametov, Amir Subaev and\n          Lera Vertash\n        </Footer>\n      </Layout>\n    </div>\n  );\n};\n\nexport default App;\n",["45","46"],"/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/index.js",[],["47","48"],"/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/stores/user.js",[],"/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/stores/root.js",[],["49","50"],"/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/Teacher/index.js",[],"/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/Student/index.js",["51","52","53"],"/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/Teacher/Quiz/index.js",["54","55","56","57","58","59","60","61"],"import React from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport {\n  Button,\n  Space,\n  Table,\n  Modal,\n  Form,\n  Input,\n  Progress,\n  Typography,\n  Spin,\n} from \"antd\";\nimport { PlusCircleOutlined, SketchSquareFilled } from \"@ant-design/icons\";\nimport QuestionModal from \"./QuestionModal\";\n\n/**\n * 1) Static page (init)\n * 2) Generate code (generateCode)\n * 3) N question (question)\n * 4) Your result (result)\n */\n\nconst sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nconst { Title, Text } = Typography;\n\nfunction makeid(length) {\n  var result = \"\";\n  var characters = \"0123456789\";\n  var charactersLength = characters.length;\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\nconst quiz = [\n  {\n    id: 1,\n    name: \"Why do you never see elephants hiding in trees?\",\n    answer: \"Because they're very good at it.\",\n    time: \"10\",\n    cost: 1,\n  },\n  {\n    id: 2,\n    name: \"Why do flamingos always lift one leg while standing?\",\n    answer: \"Because if they lifted both legs they'd fall over.\",\n    time: \"10\",\n    cost: 1,\n  },\n];\n\nconst Quiz = () => {\n  const location = useLocation();\n  const history = useHistory();\n  const [currentStage, onChangeStage] = React.useState(\n    !!location.search ? \"generateCode\" : \"init\"\n  );\n  const [currentQuestion, onQuestion] = React.useState(0);\n  const [waitUntil, onWaitQuestion] = React.useState(null);\n\n  const [quizId] = React.useState(\n    !!location.pathname.split(\"/\")[2]\n      ? Number(location.pathname.split(\"/\")[2])\n      : -1\n  );\n\n  const [modalVisible, onModalVisible] = React.useState(false);\n  const [question, onChangeQuestion] = React.useState({});\n\n  const [quizData, setQuizData] = React.useState([]);\n\n  React.useEffect(() => {\n    if (quizId !== -1) {\n      setQuizData([\n        {\n          id: 1,\n          name: \"Why do you never see elephants hiding in trees?\",\n          answer: \"Because they're very good at it.\",\n          time: \"10\",\n          cost: 1,\n        },\n      ]);\n    }\n  }, []);\n\n  React.useEffect(() => {\n    console.log(`Current stage: ${currentStage}`);\n\n    const stateManager = async () => {};\n\n    stateManager();\n  }, [currentStage]);\n\n  React.useEffect(() => {\n    const update = async () => {\n      console.log(currentStage);\n      if (currentStage === \"question\" || currentStage === \"questionWait\") {\n        const timeDiv = 1000;\n\n        await sleep(timeDiv);\n\n        if (waitUntil + timeDiv >= Number(quiz[currentQuestion].time) * 1000) {\n          if (currentQuestion + 1 >= quiz.length) {\n            onChangeStage(\"result\");\n          } else {\n            onQuestion(currentQuestion + 1);\n            onWaitQuestion(0);\n          }\n        } else {\n          onWaitQuestion(waitUntil + timeDiv);\n        }\n      }\n    };\n\n    update();\n  }, [waitUntil]);\n\n  const columns = [\n    {\n      title: \"Question\",\n      dataIndex: \"name\",\n      width: \"90%\",\n    },\n    {\n      title: \"Action\",\n      key: \"action\",\n      render: (text, record, index) => {\n        return (\n          <Space size=\"middle\">\n            <Button\n              onClick={() => {\n                onChangeQuestion(record);\n                onModalVisible(true);\n              }}\n            >\n              Update\n            </Button>\n            <Button\n              danger\n              onClick={() => {\n                setQuizData([\n                  ...quizData.slice(0, index),\n                  ...quizData.slice(index + 1, quizData.length),\n                ]);\n              }}\n            >\n              Delete\n            </Button>\n          </Space>\n        );\n      },\n    },\n  ];\n\n  const questionColumns = [\n    { title: \"Student\", dataIndex: \"login\", key: \"login\" },\n    { title: \"Answer\", dataIndex: \"answer\", key: \"answer\" },\n  ];\n\n  const allResultsColumns = [\n    { title: \"Student\", dataIndex: \"login\", key: \"login\" },\n    { title: \"Question # 1\", dataIndex: \"q1\", key: \"q1\" },\n    { title: \"Question # 2\", dataIndex: \"q2\", key: \"q2\" },\n  ];\n\n  const renderStage = (stage) => {\n    switch (stage) {\n      case \"init\":\n        return (\n          <>\n            <Space align=\"start\">\n              <Button\n                icon={<PlusCircleOutlined />}\n                onClick={() => {\n                  onModalVisible(true);\n                  onChangeQuestion({});\n                }}\n                style={{ marginBottom: \"1rem\" }}\n              >\n                Add new question\n              </Button>\n              <Button\n                onClick={() => {\n                  onChangeStage(\"question\");\n                  onWaitQuestion(0);\n                }}\n              >\n                Start quiz\n              </Button>\n            </Space>\n            <Table\n              columns={columns}\n              dataSource={quizData}\n              pagination={false}\n            ></Table>\n\n            <QuestionModal\n              visible={modalVisible}\n              onCreate={() => onModalVisible(false)}\n              onCancel={() => {\n                onModalVisible(false);\n              }}\n              initialValues={question}\n            />\n          </>\n        );\n      case \"generateCode\":\n        return (\n          <div className=\"enterCode\">\n            <Title>Quiz</Title>\n            <Text>\n              Your code is: <Title level={6}>{makeid(6)}</Title>\n            </Text>\n            <Button\n              onClick={() => {\n                onChangeStage(\"question\");\n                onWaitQuestion(0);\n              }}\n            >\n              Start quiz\n            </Button>\n          </div>\n        );\n      case \"question\":\n        return (\n          <div className=\"question\">\n            <Title>{quiz[currentQuestion].name}</Title>\n            <Title level={3}>Already answered</Title>\n            <Table\n              columns={questionColumns}\n              dataSource={[{ login: \"Student 1\", answer: \"answer\", key: 1 }]}\n              pagination={false}\n              style={{ width: \"100%\" }}\n            />\n            <Progress\n              percent={\n                (waitUntil / (1000 * Number(quiz[currentQuestion].time))) * 100\n              }\n              showInfo={false}\n              status=\"active\"\n            />\n          </div>\n        );\n      case \"result\":\n        return (\n          <div className=\"result\">\n            <Title>Students' results</Title>\n            <Table\n              dataSource={[\n                { login: \"Student 1\", q1: \"Answer 1\", q2: \"Answer 2\" },\n              ]}\n              columns={allResultsColumns}\n            />\n          </div>\n        );\n      default:\n        return (\n          <div className=\"wrong\">\n            <Title>Something wrong. Please, reload page</Title>\n          </div>\n        );\n    }\n  };\n\n  return <div className=\"quiz\">{renderStage(currentStage)}</div>;\n};\n\nexport default Quiz;\n","/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/Teacher/Login/index.js",["62"],"/Users/buldiga/Documents/frontshit/map-projects-greek-salad/frontend/src/Teacher/Quiz/QuestionModal.js",["63","64"],"import React from \"react\";\nimport { Button, Modal, Form, Input, Radio } from \"antd\";\n\nconst QuestionModal = ({ visible, onCreate, onCancel, initialValues }) => {\n  const [form] = Form.useForm();\n  return (\n    <Modal\n      visible={visible}\n      title=\"Create a new collection\"\n      okText=\"Create\"\n      cancelText=\"Cancel\"\n      onCancel={onCancel}\n      onOk={() => {\n        form\n          .validateFields()\n          .then((values) => {\n            form.resetFields();\n            onCreate(values);\n          })\n          .catch((info) => {\n            console.log(\"Validate Failed:\", info);\n          });\n      }}\n    >\n      <Form\n        form={form}\n        layout=\"vertical\"\n        name=\"form_in_modal\"\n        initialValues={initialValues}\n      >\n        <Form.Item\n          name=\"name\"\n          label=\"Question\"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          name=\"answer\"\n          label=\"Answer\"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          name=\"time\"\n          label=\"Time\"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          name=\"cost\"\n          label=\"Cost\"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default QuestionModal;\n",{"ruleId":"65","severity":1,"message":"66","line":3,"column":10,"nodeType":"67","messageId":"68","endLine":3,"endColumn":23},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"69","replacedBy":"73"},{"ruleId":"71","replacedBy":"74"},{"ruleId":"69","replacedBy":"75"},{"ruleId":"71","replacedBy":"76"},{"ruleId":"65","severity":1,"message":"77","line":1,"column":17,"nodeType":"67","messageId":"68","endLine":1,"endColumn":21},{"ruleId":"78","severity":1,"message":"79","line":83,"column":6,"nodeType":"80","endLine":83,"endColumn":20,"suggestions":"81"},{"ruleId":"78","severity":1,"message":"82","line":116,"column":6,"nodeType":"80","endLine":116,"endColumn":17,"suggestions":"83"},{"ruleId":"65","severity":1,"message":"84","line":7,"column":3,"nodeType":"67","messageId":"68","endLine":7,"endColumn":8},{"ruleId":"65","severity":1,"message":"85","line":8,"column":3,"nodeType":"67","messageId":"68","endLine":8,"endColumn":7},{"ruleId":"65","severity":1,"message":"86","line":9,"column":3,"nodeType":"67","messageId":"68","endLine":9,"endColumn":8},{"ruleId":"65","severity":1,"message":"87","line":12,"column":3,"nodeType":"67","messageId":"68","endLine":12,"endColumn":7},{"ruleId":"65","severity":1,"message":"88","line":14,"column":30,"nodeType":"67","messageId":"68","endLine":14,"endColumn":48},{"ruleId":"65","severity":1,"message":"89","line":57,"column":9,"nodeType":"67","messageId":"68","endLine":57,"endColumn":16},{"ruleId":"78","severity":1,"message":"90","line":87,"column":6,"nodeType":"80","endLine":87,"endColumn":8,"suggestions":"91"},{"ruleId":"78","severity":1,"message":"92","line":119,"column":6,"nodeType":"80","endLine":119,"endColumn":17,"suggestions":"93"},{"ruleId":"94","severity":1,"message":"95","line":156,"column":15,"nodeType":"96","endLine":163,"endColumn":16},{"ruleId":"65","severity":1,"message":"97","line":2,"column":10,"nodeType":"67","messageId":"68","endLine":2,"endColumn":16},{"ruleId":"65","severity":1,"message":"98","line":2,"column":38,"nodeType":"67","messageId":"68","endLine":2,"endColumn":43},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","no-native-reassign",["99"],"no-negated-in-lhs",["100"],["99"],["100"],["99"],["100"],"'memo' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'userAnswers'. Either include it or remove the dependency array. You can also do a functional update 'onUserAnswer(u => ...)' if you only need 'userAnswers' in the 'onUserAnswer' call.","ArrayExpression",["101"],"React Hook React.useEffect has missing dependencies: 'currentQuestion', 'currentStage', and 'userAnswers'. Either include them or remove the dependency array. You can also do a functional update 'onQuestion(c => ...)' if you only need 'currentQuestion' in the 'onQuestion' call.",["102"],"'Modal' is defined but never used.","'Form' is defined but never used.","'Input' is defined but never used.","'Spin' is defined but never used.","'SketchSquareFilled' is defined but never used.","'history' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'quizId'. Either include it or remove the dependency array.",["103"],"React Hook React.useEffect has missing dependencies: 'currentQuestion' and 'currentStage'. Either include them or remove the dependency array. You can also do a functional update 'onQuestion(c => ...)' if you only need 'currentQuestion' in the 'onQuestion' call.",["104"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Button' is defined but never used.","'Radio' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},{"desc":"111","fix":"112"},"Update the dependencies array to be: [currentStage, userAnswers]",{"range":"113","text":"114"},"Update the dependencies array to be: [currentQuestion, currentStage, userAnswers, waitUntil]",{"range":"115","text":"116"},"Update the dependencies array to be: [quizId]",{"range":"117","text":"118"},"Update the dependencies array to be: [currentQuestion, currentStage, waitUntil]",{"range":"119","text":"120"},[1887,1901],"[currentStage, userAnswers]",[2844,2855],"[currentQuestion, currentStage, userAnswers, waitUntil]",[2101,2103],"[quizId]",[2885,2896],"[currentQuestion, currentStage, waitUntil]"]